package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"path/filepath"
	"strings"
	"time"
)

type Generator struct {
	gf       *GoFile
	handlers []*GoFunc
	output   string

	buf bytes.Buffer
}

func NewGenerator(gf *GoFile, handlers []*GoFunc) *Generator {
	generator := Generator{
		gf:       gf,
		handlers: handlers,
	}
	return &generator
}

func (g *Generator) printf(format string, args ...interface{}) {
	_, _ = fmt.Fprintf(&g.buf, format, args...)
}

func (g *Generator) Generate() {

	g.printf("// Code generated by %s. DO NOT EDIT.\n", "genx api")
	g.printf("// Generated at %s\n", time.Now().Format(time.RFC3339))
	g.printf("\n")
	g.printf("package %s\n\n", g.gf.Pkg.Name)

	src := g.format()
	fileName := g.gf.Name()

	outputName := g.output
	if outputName == "" {

		dir := g.gf.GetDir()
		baseName := fmt.Sprintf("%s_genx.go", fileName)
		outputName = filepath.Join(dir, strings.ToLower(baseName))
	}
	err := ioutil.WriteFile(outputName, src, 0644)
	if err != nil {
		log.Fatalf("writing output: %s", err)
	}
}

// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}
